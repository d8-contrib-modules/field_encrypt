<?php
/**
 * Contains module hooks for field_encrypt
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter.
 *
 * Add a field to the field storage configuration forms to allow setting the encryption state.
 */
function field_encrypt_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // If this is the add or edit form for field_storage, we call our function.
  if (in_array($form_id, ['field_storage_add_form', 'field_storage_config_edit_form'])) {

    // Check permissions
    $user = \Drupal::currentUser();

    if ($user->hasPermission('administer field encryption')) {
      /**
       * @var $field \Drupal\field\Entity\FieldStorageConfig
       */
      $field = $form_state->getFormObject()->getEntity();
      $provider_manager = \Drupal::service('plugin.manager.field_encrypt.provider_manager');
      if ($valid_providers = $provider_manager->getProvidersForFieldType($field->getType())) {
        $default_provider = NULL;
        // Add field_encrypt form.
        $form['field_encrypt'] = array(
          '#type' => 'container',
          '#title' => t('Field encryption'),
          '#title_display' => FALSE,
          '#tree' => TRUE,
        );

        $form['field_encrypt']['encrypt'] = [
          '#type' => 'checkbox',
          '#title' => t('Encrypted'),
          '#description' => t('Makes the field storage encrypted.'),
          '#default_value' => $field->getThirdPartySetting('field_encrypt', 'encrypt', FALSE),
        ];

        if (count($valid_providers) > 1) {
          // If there is more than 1 valid provider, allow choosing one.
          $default_provider = $field->getThirdPartySetting('field_encrypt', 'provider_id', FALSE);
          $form['field_encrypt']['provider_id'] = [
            '#type' => 'select',
            '#title' => t('Provider'),
            '#description' => t('Choose the encryption provider to encrypt this field.'),
            '#options' => $valid_providers,
            '#default_value' => $default_provider,
            '#required' => TRUE,
            '#ajax' => array(
              'callback' => 'field_encrypt_ajax_update_settings',
              'event' => 'change',
              'wrapper' => 'provider-settings',
            ),
          ];
        }
        else {
          // If there is only one, make it the default.
          $valid_provider_ids = array_keys($valid_providers);
          $default_provider = array_shift($valid_provider_ids);
          $form['field_encrypt']['provider_id'] = [
            '#type' => 'value',
            '#value' => $default_provider,
          ];
        }

        // Add settings form for the provider.
        $form['field_encrypt']['provider_settings'] = array(
          '#type' => 'container',
          '#title' => t('Settings'),
          '#title_display' => FALSE,
          '#tree' => TRUE,
          '#prefix' => '<div id="provider-settings">',
          '#suffix' => '</div>',
        );

        $selected_provider_id = NULL;
        $user_input = $form_state->getUserInput();
        if ($user_input && isset($user_input['field_encrypt']['provider_id'])) {
          $selected_provider_id = $user_input['field_encrypt']['provider_id'];
        }
        if (!$selected_provider_id) {
          $selected_provider_id = $default_provider;
        }
        if ($selected_provider_id) {
          $provider_settings = $field->getThirdPartySetting('field_encrypt', 'provider_settings', []);
          $field_encrypt_provider = $provider_manager->createInstance($selected_provider_id, $provider_settings);
          $plugin_form_state = field_encrypt_create_plugin_form_state($form_state);
          $form['field_encrypt']['provider_settings'] += $field_encrypt_provider->buildConfigurationForm([], $plugin_form_state);
          $form_state->setValue(array('field_encrypt', 'provider_settings'), $form_state ->getValues());

          // We add a function to process the form when it is saved.
          $form['#entity_builders'][] = 'field_encrypt_form_field_add_form_builder';
        }
      }

    }
  }
}

/**
 * AJAX callback to update the dynamic settings on the form.
 *
 * @param array $form
 *   The form definition array for the encryption profile form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return array
 *   The element to update in the form.
 */
function field_encrypt_ajax_update_settings(array &$form, FormStateInterface $form_state) {
  return $form['field_encrypt']['provider_settings'];
}

/**
 * Creates a FormStateInterface object for a plugin.
 *
 * @param FormStateInterface $form_state
 *   The form state to copy values from.
 *
 * @return FormStateInterface
 *   A clone of the form state object with values from the plugin.
 */
function field_encrypt_create_plugin_form_state(FormStateInterface $form_state) {
  // Clone the form state.
  $plugin_form_state = clone $form_state;

  // Clear the values, except for this plugin type's settings.
  $plugin_form_state->setValues($form_state->getValue('encryption_method_configuration', []));

  return $plugin_form_state;
}

/**
 * Update the field storage configuration to set the encryption state.
 *
 * @param $entity_type
 * @param \Drupal\field\Entity\FieldStorageConfig $fieldStorageConfig
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function field_encrypt_form_field_add_form_builder($entity_type, \Drupal\field\Entity\FieldStorageConfig $fieldStorageConfig, &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $field_encryption_settings = $form_state->getValue('field_encrypt');
  $form_encryption = $field_encryption_settings['encrypt'];
  $original_encryption = $fieldStorageConfig->getThirdPartySettings('field_encrypt');

  // If the form has the value, we set it.
  if ($form_encryption === 1) {
    foreach ($field_encryption_settings as $settings_key => $settings_value) {
      $fieldStorageConfig->setThirdPartySetting('field_encrypt', $settings_key, $settings_value);
    }
  }
  else {
    // If there is no value, remove.
    $fieldStorageConfig->unsetThirdPartySettings('field_encrypt');
  }

  if ($original_encryption !== $fieldStorageConfig->getThirdPartySettings('field_encrypt')) {
    // We need to process the field to either encrypt or decrypt the stored fields if the setting was changed.
    $field_name = $fieldStorageConfig->get('field_name');
    $field_entity_type = $fieldStorageConfig->get('entity_type');

    /**
     * @var $field_encrypt_process_entities \Drupal\field_encrypt\FieldEncryptProcessEntities
     */
    $field_encrypt_process_entities = \Drupal::service('field_encrypt.process_entities');
    if ($form_encryption === 1) {
      $field_encrypt_process_entities->encrypt_stored_field($field_entity_type, $field_name);
    }
    elseif ($form_encryption === 0) {
      $field_encrypt_process_entities->decrypt_stored_field($field_entity_type, $field_name);
    }
  }
}

/**
 * Encrypt fields before they are saved.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function field_encrypt_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  if (!($entity instanceof Drupal\Core\Entity\ContentEntityInterface)) {return;}
  /**
   * @var $field_encrypt_process_entities \Drupal\field_encrypt\FieldEncryptProcessEntities
   */
  $field_encrypt_process_entities = \Drupal::service('field_encrypt.process_entities');
  $field_encrypt_process_entities->encrypt_entity($entity);
}

/**
 * Decrypt fields before they are rendered.
 *
 * @param $entities
 * @param $entity_type
 */
function field_encrypt_entity_load($entities, $entity_type) {
  /**
   * @var $field_encrypt_process_entities \Drupal\field_encrypt\FieldEncryptProcessEntities
   */
  $field_encrypt_process_entities = \Drupal::service('field_encrypt.process_entities');

  foreach($entities as &$entity) {
    if (!($entity instanceof Drupal\Core\Entity\ContentEntityInterface)) {continue;}
    $field_encrypt_process_entities->decrypt_entity($entity);
  }
}
